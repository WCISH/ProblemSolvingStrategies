#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
    return 0;
}


int majority1(const vector<int>& A) {
    int N = A.size();
    int majority = -1, majorityCount = 0;

    //수행 시간 = N^2

    for (int i = 0; i < N; ++i) {
        int V = A[i], count = 0;

        for (int j = 0; j < N; ++j) {
            if (A[j] == V)
                ++count;
        }

        //Renewal
        if (count > majorityCount) {
            majorityCount = count;
            majority = V;
        }
    }
    return majority;
}

int majority2(const vector<int>& A) {
    int N = A.size();
    vector<int> count(101, 0);
  
    for (int i = 0; i < N; ++i)
        count[A[i]];

    int majority = 0;

    for (int i = 1; i <= 100; ++i) {
        if (count[i] > count[majority])
            majority = i;
    }

    return majority;
}


vector<double> movingAverage1(const vector<double>& A, int M) {
    vector<double> ret;
    //M(N-M+1) 번 수행
    /*
    0. n을 정해줬으므로 길이 12의 몸무게 리스트을 만든다.
    1. 이중 for 문을 통해서 m달 동안의 이동 평균을 구한다.
    2. 첫 번째 for문에서는 [m-1, n) 까지 인덱싱 한다.
    2-1. m = 3이고 n = 12인 경우에 [2, 11)까지 인덱싱 해서 두 번째 for문의 기준이 되도록 한다.
    3. 두 번째 for문에서는 [0, m) 까지 인덱싱 한다. m달 간의 이동평균을 구해야 하기 때문이다.
    4. m달간의 값을 더해서 저장하는 변수에 몸무게 리스트의 [i-j] 번 째 값을 더해준다.
    5. 합을 m으로 나눠서 이동평균을 출력하고 첫 번째 반복문이 다시 시작될 때 m달 간 값을 더하는 변수를 0으로 초기화 시킨다.


    "시간 복잡도가 O(N^2)으로 선형 시간 알고리즘이라고 할 수 없다."
    */
    int N = A.size();

    for (int i = M - 1; i < N; ++i) {
        double partialSum = 0;

        for (int j = 0; j < M; ++j)
            partialSum += A[i - j];

        ret.push_back(partialSum / M);
    }

    return ret;
}


vector<double> movingAverage1(const vector<double>& A, int M) {
    vector<double> ret;
    int N = A.size();
    double partialSum = 0;

    for (int i = 0; i < M - 1; ++i)
        partialSum += A[i];

    //0123번째 이동평균 -> 0 번째 삭제 -> 4번째 더하기 -> 1234 번째 이동평균 -> 1 번째 삭제....
    //해주면 하나의 for문으로만 이동 평균을 구할 수 있음.
    //M-1+(N-M+1)
    //N이 두 배 커지면 실행도 두 배 오래 걸림
    //입력 크기에 대비해 걸리는 시간을 그려 보면 직선
    //선형 시간(linear time) 알고리즘
    for (int i = M - 1; i < N; ++i) {
        partialSum += A[i];
        ret.push_back(partialSum / M);
        partialSum -= A[i - M + 1];
    }

    return ret;
}



//지수시간(다항) 알고리즘 Polynomial time
const int INF = 987654321;
// 이 메뉴로 모두가 식사할 수 있는지 여부를 반환한다.
bool canEverybodyEat(const vector<int>& menu);
// 요리할 수 있는 음식의 종류 수
int M;
//food번째 음식을 만들지 여부를 결정한다.
int selectMenu(vector<int>& menu, int food) {
    //기저 사례:모든 음식에 대해 만들지 여부를 결정했을 때
    if (food == M) {
        if (canEverybodyEat(menu)) return menu.size();
        //아무것도 못 먹는 사람이 있으면 아주 큰 값을 반환한다.
        return INF;
    }
    //이 음식을 만들지 않는 경우의 값을 계산한다.
    int ret = selectMenu(menu, food + 1);
    //이 음식을 만드는 경우의 답을 계산해서 더 작은 것을 취한다.
    menu.push_back(food);
    ret = min(ret, selectMenu(menu, food + 1));
    menu.pop_back();
    return ret;
}
