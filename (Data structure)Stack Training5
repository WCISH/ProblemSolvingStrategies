#include <iostream>
#include <stack>
#include <string>
using namespace std;


void move_to_left(stack<char>& s1, stack<char>& s2) {
	if (!s1.empty())
	{
		char temp = s1.top();
		s1.pop();
		s2.push(temp);
	}
}

void move_to_right(stack<char>& s1, stack<char>& s2) {
	if (!s2.empty()) {
		char temp = s2.top();
		s2.pop();
		s1.push(temp);
	}
}

void remove_on_the_left(stack<char>& s1) {
	if(!s1.empty())
		s1.pop();
}

void add_on_the_left(stack<char>& s1, char data) {
	s1.push(data);
}

int main(void) {
	int how_many;
	string s;
	stack<char> _stack[2];

	getline(cin, s);
	cin >> how_many;
	
	for (char ch : s)
		_stack[0].push(ch);

	while (how_many--) {
		char _first_input;
		cin >> _first_input;

		if (_first_input == 'L') {
			move_to_left(_stack[0], _stack[1]);
		}
		else if (_first_input == 'D') {
			move_to_right(_stack[0], _stack[1]);
		}
		else if (_first_input == 'B') {
			remove_on_the_left(_stack[0]);
		}
		else if (_first_input == 'P') {
			char _second_input;
			cin >> _second_input;
			add_on_the_left(_stack[0], _second_input);
		}
	}
	
	while (!_stack[0].empty()) {
		_stack[1].push(_stack[0].top());
		_stack[0].pop();
	}

	while (!_stack[1].empty()) {
		printf("%c",_stack[1].top());
		_stack[1].pop();
	}

	return 0;
}




[better code]
#include <cstdio>
#include <cstring>
#include <stack>
using namespace std;
char a[600000];
int main() {
	scanf("%s", a);
	stack<char> left, right;
	int n = strlen(a);
	for (int i = 0; i < n; i++) {
		left.push(a[i]);
	}
	int m;
	scanf("%d", &m);
	while (m--) {
		char what;
		scanf(" %c", &what);
		if (what == 'L') {
			if (!left.empty()) {
				right.push(left.top());
				left.pop();
			}
		}
		else if (what == 'D') {
			if (!right.empty()) {
				left.push(right.top());
				right.pop();
			}
		}
		else if (what == 'B') {
			if (!left.empty()) {
				left.pop();
			}
		}
		else if (what == 'P') {
			char c;
			scanf(" %c", &c);
			left.push(c);
		}
	}
	while (!left.empty()) {
		right.push(left.top());
		left.pop();
	}
	while (!right.empty()) {
		printf("%c", right.top());
		right.pop();
	}
	printf("\n");
	return 0;
}
